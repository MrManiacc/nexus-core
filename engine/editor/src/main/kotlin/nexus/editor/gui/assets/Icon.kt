package nexus.editor.gui.assets

import imgui.ImGui
import nexus.editor.gui.Element
import nexus.editor.gui.internal.ID
import nexus.editor.gui.internal.WindowFlag
import nexus.engine.assets.texture.Texture
import nexus.engine.assets.texture.TextureData
import nexus.engine.assets.texture.TextureInstance
import nexus.engine.assets.texture.TextureInstanceData
import nexus.plugins.opengl.GLTexture2D
import org.lwjgl.opengl.GL11

/**
 * An icon is simply a texture2d that can be loaded from your resources
 */
interface Icon : Element {

    /**
     * This is the render id aka the texture id. This is generated by opengl or another platform,
     * it can be used to render
     */
    val renderId: Int get() = -1

    /**
     * This is used for safety when rendering. the id should be non -1 when the [TextureInstance] is created
     */
    val isValid: Boolean get() = renderId != -1

    /**
     * Used for simplicity and easy of access to keep to the "kotlin way" lol
     */
    val isNotValid: Boolean get() = !isValid

    /**
     * This invokes our render method
     */
    operator fun invoke() = render()

    companion object {
        /**
         * This will get the instance of the ImGuiRenderer
         */
        operator fun invoke(name: String): Icon {
            return ImGuiIcon(name)
        }
    }

    /**
     * This is used for pure opengl icons.
     */
    abstract class AbstractIcon internal constructor(override val name: String) : Icon {
        //TODO come up with better asset creation/management
        private val texture: Texture = GLTexture2D().initialize(TextureData(name, flipVertically = false))
        protected var instance: TextureInstance? = null


        /**
         * This is the render id aka the texture id. This is generated by opengl or another platform,
         * it can be used to render
         */
        override val renderId: Int
            get() = if (instance != null) instance!!.textureID else {
                instance = texture.instantiate(
                    TextureInstanceData(
                        0,
                        GL11.GL_TEXTURE_MIN_FILTER to GL11.GL_LINEAR,
                        GL11.GL_TEXTURE_MAG_FILTER to GL11.GL_NEAREST,
                        GL11.GL_TEXTURE_WRAP_S to GL11.GL_REPEAT,
                        GL11.GL_TEXTURE_WRAP_T to GL11.GL_REPEAT,
                    )
                ) as TextureInstance
                instance!!.textureID
            }

    }

    class ImGuiIcon internal constructor(name: String) : AbstractIcon(name) {
        /**
         * This will render the icon
         */
        override fun render() {
            ImGui.pushID(displayName)
            ImGui.image(renderId, 30f, 30f)
            ImGui.popID()
        }

        /**
         * The nameId should be created by first getting rid of the extension then generating a name
         */
        override val nameId: ID = ID(name.substringBefore(".").replace("/", ".").replace("\\", "."))


        /**
         * This should be created from the enum values for the flags
         */
        override val flags: Int = WindowFlag.None()
    }

}